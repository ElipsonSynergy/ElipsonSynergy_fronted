---
// ProductFilter.astro
interface Props {
  translations?: (key: string) => string;
}

import { getLangFromUrl, useTranslations, languages } from '@/utils/i18n';
export async function getStaticPaths() {
  return Object.keys(languages).map((loc) => ({
    params: { locate: loc },
  }));
}

let lang = getLangFromUrl(Astro.url);


const t = useTranslations(lang);
---
<div class="flex justify-center items-center mb-12 px-4">
    <div class="relative inline-flex bg-gray-100 rounded-full p-1 shadow border border-gray-200 overflow-hidden">
      
      <!-- Indicador dinÃ¡mico -->
      <div id="indicator" class="absolute bg-blue-600 rounded-full transition-all duration-300 ease-out z-0" style="height: calc(100% - 8px); top: 4px; left: 4px; width: 0;"></div>
      
      <!-- Botones -->
      <button class="filter-btn relative z-10 px-5 py-2 text-sm font-medium rounded-full
         text-gray-600 hover:text-gray-800 transition-all duration-300 whitespace-nowrap
         border-0 focus:outline-none focus:ring-0 focus:border-0" data-category="all">
        {t('product_filter.all_projects')}
      </button>
      <button class="filter-btn relative z-10 px-5 py-2 text-sm font-medium rounded-full
         text-gray-600 hover:text-gray-800 transition-all duration-300 whitespace-nowrap
         border-0 focus:outline-none focus:ring-0 focus:border-0" data-category="agro">
        {t('product_filter.categories.agro')}
      </button>
      <button class="filter-btn relative z-10 px-5 py-2 text-sm font-medium rounded-full
         text-gray-600 hover:text-gray-800 transition-all duration-300 whitespace-nowrap
         border-0 focus:outline-none focus:ring-0 focus:border-0" data-category="jovenes">
        {t('product_filter.categories.jovenes')}
      </button>
      <button class="filter-btn relative z-10 px-5 py-2 text-sm font-medium rounded-full
         text-gray-600 hover:text-gray-800 transition-all duration-300 whitespace-nowrap
         border-0 focus:outline-none focus:ring-0 focus:border-0" data-category="store">
        {t('product_filter.categories.store')}
      </button>
      <button class="filter-btn relative z-10 px-5 py-2 text-sm font-medium rounded-full
         text-gray-600 hover:text-gray-800 transition-all duration-300 whitespace-nowrap
         border-0 focus:outline-none focus:ring-0 focus:border-0" data-category="makers">
        {t('product_filter.categories.makers')}
      </button>
      <button class="filter-btn relative z-10 px-5 py-2 text-sm font-medium rounded-full
         text-gray-600 hover:text-gray-800 transition-all duration-300 whitespace-nowrap
         border-0 focus:outline-none focus:ring-0 focus:border-0" data-category="software">
        {t('product_filter.categories.software')}
      </button>
    </div>
  </div>
  
  <script type="module">
    document.addEventListener('DOMContentLoaded', () => {
      const buttons = document.querySelectorAll('.filter-btn');
      const indicator = document.getElementById('indicator');
      const cards = document.querySelectorAll('.project-card');
      const gridContainer = document.getElementById('projects-grid');
  
      function updateIndicator(button) {
        const rect = button.getBoundingClientRect();
        const parentRect = button.parentElement.getBoundingClientRect();
        const left = rect.left - parentRect.left;
        const width = rect.width;
  
        indicator.style.left = `${left}px`;
        indicator.style.width = `${width}px`;
      }
  
      function activateButton(button) {
        buttons.forEach(btn => {
          btn.classList.remove('text-white', 'bg-blue-600');
          btn.classList.add('text-gray-600');
        });
        button.classList.remove('text-gray-600');
        button.classList.add('text-white', 'bg-blue-600');
  
        updateIndicator(button);
      }
  
      function filterCards(category) {
        // First, hide all cards with animation
        cards.forEach((card, index) => {
          card.style.transform = 'translateY(20px) scale(0.9)';
          card.style.opacity = '0';
        });
  
        // After animation, reorganize and show filtered cards
        setTimeout(() => {
          // Convert NodeList to Array for better manipulation
          const cardsArray = Array.from(cards);
          
          if (category === 'all') {
            // Show all cards in original order
            cardsArray.forEach((card, index) => {
              setTimeout(() => {
                card.style.opacity = '1';
                card.style.transform = 'translateY(0) scale(1)';
                card.style.display = 'block';
              }, index * 80);
            });
          } else {
            // Filter and reorganize
            const filteredCards = [];
            const hiddenCards = [];
            
            cardsArray.forEach(card => {
              const cardCategory = card.dataset.category;
              if (cardCategory === category) {
                filteredCards.push(card);
              } else {
                hiddenCards.push(card);
              }
            });
  
            // Clear container and reorganize DOM order
            while (gridContainer.firstChild) {
              gridContainer.removeChild(gridContainer.firstChild);
            }
            
            // Add filtered cards first
            filteredCards.forEach(card => {
              gridContainer.appendChild(card);
            });
            
            // Add hidden cards at the end
            hiddenCards.forEach(card => {
              gridContainer.appendChild(card);
            });
  
            // Show filtered cards with staggered animation
            filteredCards.forEach((card, index) => {
              setTimeout(() => {
                card.style.opacity = '1';
                card.style.transform = 'translateY(0) scale(1)';
                card.style.display = 'block';
              }, index * 120);
            });
  
            // Hide non-filtered cards
            hiddenCards.forEach(card => {
              card.style.display = 'none';
              card.style.opacity = '0';
              card.style.transform = 'translateY(20px) scale(0.9)';
            });
          }
        }, 250);
      }
  
      // Initialize with first button active
      const initialButton = buttons[0];
      activateButton(initialButton);
      setTimeout(() => updateIndicator(initialButton), 100);
  
      buttons.forEach(button => {
        button.addEventListener('click', () => {
          const category = button.dataset.category;
          activateButton(button);
          filterCards(category);
        });
      });
  
      // Adjust indicator on resize
      window.addEventListener('resize', () => {
        const active = document.querySelector('.filter-btn.bg-blue-600');
        if (active) updateIndicator(active);
      });
    });
  </script>
  
  <style>
    .project-card {
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }
  </style>
  