---
/**
 * Create Post Admin Page
 * 
 * Administrative interface for creating new blog posts with modern design and:
 * - Rich text editor (CKEditor 5) for content creation
 * - Dynamic tag management with autocomplete and creation
 * - Author selection from database
 * - Image upload for banner
 * - Form validation and submission handling
 * - Modern gradient design matching the blog theme
 * 
 * Features:
 * - Real-time tag suggestions and creation
 * - Client-side form validation
 * - File upload handling with proper encoding
 * - Error handling and user feedback
 * - Responsive design for admin use
 * - Modern UI with animations and gradients
 * 
 * Dependencies:
 * - CKEditor 5 Classic Build (CDN)
 * - Backend API endpoints: /api/authors, /api/tags, /api/posts
 * - BaseLayout for consistent design
 * - Tailwind CSS for styling
 * 
 * Security Note:
 * This page should be protected by authentication middleware
 * in a production environment.
 * 
 * @page /admin/create-post
 */

import BaseLayout from '../../../layouts/BaseLayout.astro';
import { useTranslations, languages, getLangFromUrl } from '../../../utils/i18n';
import { initI18n } from "../../../i18n/confg";

export async function getStaticPaths() {
  return Object.keys(languages).map((loc) => ({
    params: { locate: loc },
  }));
}


let lang = getLangFromUrl(Astro.url);


const t = useTranslations(lang);

---

<BaseLayout title="Crear Blog | Admin Panel" description="Panel administrativo para crear nuevos posts del blog">
  <!-- Hero Section -->
  <section class="relative py-24 lg:py-32 bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 overflow-hidden">
    <!-- Background Elements -->
    <div class="absolute inset-0">
      <!-- Animated Grid -->
      <div class="absolute inset-0 opacity-5">
        <div class="grid grid-cols-8 grid-rows-6 gap-1 h-full w-full">
          {Array.from({length: 48}).map((_, i) => (
            <div class="bg-blue-500 rounded-sm animate-pulse" style={`animation-delay: ${i * 100}ms`}></div>
          ))}
        </div>
      </div>
      
      <!-- Floating Elements -->
      <div class="absolute top-20 left-20 w-4 h-4 bg-blue-500/20 rounded-full animate-bounce"></div>
      <div class="absolute top-40 right-40 w-6 h-6 bg-indigo-500/30 rotate-45 animate-pulse delay-500"></div>
      <div class="absolute bottom-32 left-1/4 w-3 h-3 bg-purple-500/25 rounded-full animate-ping delay-1000"></div>
    </div>
    
    <div class="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
      <h1 class="text-5xl md:text-6xl lg:text-7xl font-black mb-6 leading-tight tracking-tight">
        <span class="block text-slate-900 mb-2">{t('createPost.title')}</span>
        <span class="block bg-gradient-to-r from-blue-600 via-indigo-600 to-purple-600 bg-clip-text text-transparent">Blog Post</span>
      </h1>
      
      <p class="text-xl md:text-2xl font-semibold text-blue-600 mb-6">
        {t('createPost.subtitle')}
      </p>
      
      <p class="max-w-4xl mx-auto text-lg md:text-xl text-slate-600 leading-relaxed">
        {t('createPost.description')}
      </p>
    </div>
  </section>

  <!-- Main Form Section -->
  <section class="relative py-16 bg-white overflow-hidden">
    <!-- Background Pattern -->
    <div class="absolute inset-0 opacity-5">
      <div style="background-image: radial-gradient(circle at 1px 1px, rgba(59,130,246,0.15) 1px, transparent 0); background-size: 40px 40px;"></div>
    </div>
    
    <div class="relative max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="bg-white rounded-3xl shadow-xl border border-slate-200 p-8 lg:p-12">
        <!-- Form Header -->
        <div class="text-center mb-12">
          <div class="w-20 h-20 bg-gradient-to-r from-blue-500 to-indigo-500 rounded-2xl flex items-center justify-center mx-auto mb-6">
            <svg class="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"></path>
            </svg>
          </div>
          <h2 class="text-3xl font-bold text-slate-900 mb-4">{t('createPost.form.title')}</h2>
          <p class="text-lg text-slate-600">{t('createPost.form.description')}</p>
        </div>

        <!-- Blog Post Creation Form -->
        <form id="form-post" enctype="multipart/form-data" class="space-y-8">
          <!-- Title Input Field -->
          <div class="form-group">
            <label for="title" class="block text-lg font-semibold text-slate-900 mb-3">
              {t('createPost.form.title_label')}
            </label>
            <input
              id="title"
              name="title"
              type="text"
              class="w-full px-6 py-4 text-lg rounded-2xl border-2 border-slate-200 focus:border-blue-500 focus:ring-4 focus:ring-blue-500/20 outline-none transition-all duration-300"
              placeholder="Ingresa un título atractivo para tu blog post"
              required
            />
          </div>

          <!-- Description/Summary Field -->
          <div class="form-group">
            <label for="summary" class="block text-lg font-semibold text-slate-900 mb-3">
              {t('createPost.form.title_description')}
            </label>
            <textarea
              id="summary"
              name="summary"
              rows="4"
              class="w-full px-6 py-4 text-lg rounded-2xl border-2 border-slate-200 focus:border-blue-500 focus:ring-4 focus:ring-blue-500/20 outline-none transition-all duration-300 resize-none"
              placeholder="Una descripción concisa que capture la atención del lector"
              required
            ></textarea>
          </div>

          <!-- Content Editor Field -->
          <div class="form-group">
            <label for="editor" class="block text-lg font-semibold text-slate-900 mb-3">
              {t('createPost.form.content_label')}
            </label>
            <div class="bg-slate-50 rounded-2xl p-6 border-2 border-slate-200">
              <div id="editor" class="min-h-[400px]"></div>
            </div>
          </div>

          <!-- Two Column Layout for Author and Image -->
          <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
            <!-- Author Selection Field -->
            <div class="form-group">
              <label for="author" class="block text-lg font-semibold text-slate-900 mb-3">
                {t('createPost.form.author')}
              </label>
              <select
                id="author"
                name="authorId"
                class="w-full px-6 py-4 text-lg rounded-2xl border-2 border-slate-200 focus:border-blue-500 focus:ring-4 focus:ring-blue-500/20 outline-none transition-all duration-300 bg-white"
                required
              >
                <option value="">{t('createPost.form.loading')}</option>
              </select>
            </div>

            <!-- Banner Image Upload -->
            <div class="form-group">
              <label for="image" class="block text-lg font-semibold text-slate-900 mb-3">
                {t('createPost.form.image_label')}
              </label>
              <div class="relative">
                <input
                  id="image"
                  name="image"
                  type="file"
                  accept="image/*"
                  class="w-full px-6 py-4 text-lg rounded-2xl border-2 border-slate-200 focus:border-blue-500 focus:ring-4 focus:ring-blue-500/20 outline-none transition-all duration-300 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
                  required
                />
              </div>
            </div>
          </div>

          <!-- Tag Management System -->
          <div class="form-group">
            <label for="tag-input" class="block text-lg font-semibold text-slate-900 mb-3">
              {t('createPost.form.tags_label')}
            </label>
            
            <!-- Selected Tags Display -->
            <div id="selected-tags" class="flex flex-wrap gap-3 mb-4 min-h-[2rem]"></div>
            
            <!-- Tags Input Container -->
            <div class="tags-container relative">
              <input
                id="tag-input"
                type="text"
                class="w-full px-6 py-4 text-lg rounded-2xl border-2 border-slate-200 focus:border-blue-500 focus:ring-4 focus:ring-blue-500/20 outline-none transition-all duration-300"
                placeholder="Escribe para buscar tags existentes o crear nuevos..."
              />
              
              <!-- Suggestions Dropdown -->
              <ul
                id="suggestions"
                class="absolute top-full left-0 right-0 bg-white border-2 border-slate-200 rounded-2xl shadow-xl mt-2 max-h-60 overflow-y-auto z-10 hidden"
              ></ul>
            </div>
          </div>

          <!-- Submit Button -->
          <div class="text-center pt-8">
            <button 
              type="submit" 
              class="group inline-flex items-center space-x-3 bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white px-12 py-4 rounded-2xl font-bold text-xl transition-all duration-300 shadow-xl hover:shadow-2xl hover:-translate-y-1"
            >
              <svg class="w-6 h-6 transition-transform duration-300 group-hover:scale-110" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
              </svg>
              <span>{t('createPost.form.submit_button')}</span>
            </button>
          </div>

          <!-- Hidden Content Field -->
          <input type="hidden" name="content" />
        </form>
      </div>
    </div>
  </section>

  <!-- Success Overlay Styles -->
  <style>
    .success-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.8);
      backdrop-filter: blur(8px);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000;
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s ease;
    }

    .success-overlay.show {
      opacity: 1;
      visibility: visible;
    }

    .success-card {
      background: white;
      border-radius: 2rem;
      padding: 3rem;
      max-width: 500px;
      text-align: center;
      box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
      transform: scale(0.9);
      transition: transform 0.3s ease;
    }

    .success-overlay.show .success-card {
      transform: scale(1);
    }

    .success-icon {
      width: 80px;
      height: 80px;
      background: linear-gradient(135deg, #3b82f6, #8b5cf6);
      border-radius: 50%;
      margin: 0 auto 2rem;
      display: flex;
      align-items: center;
      justify-content: center;
      position: relative;
    }

    .success-icon::after {
      content: '✓';
      color: white;
      font-size: 40px;
      font-weight: bold;
    }

    .success-title {
      font-size: 2rem;
      font-weight: 800;
      color: #1e293b;
      margin-bottom: 1rem;
    }

    .success-description {
      font-size: 1.125rem;
      color: #64748b;
      margin-bottom: 2rem;
      line-height: 1.6;
    }

    .success-actions {
      display: flex;
      gap: 1rem;
      justify-content: center;
      flex-wrap: wrap;
    }

    .success-btn {
      padding: 0.75rem 1.5rem;
      border-radius: 1rem;
      font-weight: 600;
      text-decoration: none;
      transition: all 0.3s ease;
      border: none;
      cursor: pointer;
      font-size: 1rem;
    }

    .success-btn:not(.success-btn--secondary) {
      background: linear-gradient(135deg, #3b82f6, #6366f1);
      color: white;
    }

    .success-btn:not(.success-btn--secondary):hover {
      background: linear-gradient(135deg, #2563eb, #5b21b6);
      transform: translateY(-2px);
      box-shadow: 0 10px 25px -5px rgba(59, 130, 246, 0.4);
    }

    .success-btn--secondary {
      background: transparent;
      color: #64748b;
      border: 2px solid #e2e8f0;
    }

    .success-btn--secondary:hover {
      background: #f8fafc;
      border-color: #cbd5e1;
      transform: translateY(-2px);
    }

    .selected-tag {
      display: inline-flex;
      align-items: center;
      background: linear-gradient(135deg, #3b82f6, #6366f1);
      color: white;
      padding: 0.5rem 1rem;
      border-radius: 1rem;
      font-size: 0.875rem;
      font-weight: 600;
      gap: 0.5rem;
    }

    .selected-tag .remove {
      cursor: pointer;
      font-weight: bold;
      font-size: 1.125rem;
      opacity: 0.8;
      transition: opacity 0.2s ease;
      padding: 0.125rem;
      border-radius: 50%;
      line-height: 1;
    }

    .selected-tag .remove:hover {
      opacity: 1;
      background: rgba(255, 255, 255, 0.2);
    }

    .suggestions-list {
      list-style: none;
      padding: 0;
      margin: 0;
    }

    .suggestion-item {
      padding: 0.75rem 1rem;
      cursor: pointer;
      transition: all 0.2s ease;
      border-bottom: 1px solid #f1f5f9;
      font-weight: 500;
      color: #475569;
    }

    .suggestion-item:hover {
      background: linear-gradient(135deg, #eff6ff, #dbeafe);
      color: #3b82f6;
    }

    .suggestion-item:last-child {
      border-bottom: none;
    }

    /* CKEditor Custom Styling */
    .ck-editor__editable {
      min-height: 400px !important;
      border-radius: 1rem !important;
      border: none !important;
      box-shadow: none !important;
    }

    .ck-editor__editable:focus {
      box-shadow: none !important;
    }
  </style>

  <!-- CKEditor 5 Script -->
  <script src="https://cdn.ckeditor.com/ckeditor5/35.3.0/classic/ckeditor.js"></script>

  <!-- Client-Side JavaScript Module -->
  <script type="module">
    // Global editor instance for access across functions
    let editor;

    /**
     * Initialize CKEditor Classic Build
     * 
     * Creates a rich text editor with custom toolbar configuration
     * including essential formatting tools for blog content creation.
     */
    ClassicEditor.create(document.querySelector("#editor"), {
      placeholder: "Escribe o pega tu contenido aquí... Usa el toolbar para formatear tu texto.",
      toolbar: [
        "heading",        // H1, H2, H3 heading options
        "|",             // Toolbar separator
        "bold",          // Bold text formatting
        "italic",        // Italic text formatting
        "link",          // Link insertion and editing
        "|",
        "bulletedList",  // Unordered list creation
        "numberedList",  // Ordered list creation
        "|",
        "outdent",       // Decrease indentation
        "indent",        // Increase indentation
        "|",
        "blockQuote",    // Quote block formatting
        "insertTable",   // Table insertion tool
        "|",
        "undo",          // Undo last action
        "redo",          // Redo last undone action
      ],
    })
      .then((ed) => (editor = ed))  // Store editor instance globally
      .catch(console.error);        // Log any initialization errors

    /**
     * Load Authors from API
     * 
     * Fetches the list of available authors from the backend API
     * and populates the author selection dropdown.
     */
    async function loadAuthors() {
      const sel = document.querySelector("#author");
      try {
        // Fetch authors from API endpoint
        const res = await fetch("/api/authors");
        const list = await res.json();
        
        // Clear loading state and add default option
        sel.innerHTML = '<option value="">— Selecciona autor —</option>';
          
        // Create option element for each author
        list.forEach((a) => {
          const o = document.createElement("option");
          o.value = a.id;        // Author ID for form submission
          o.textContent = a.name; // Author name for display
          sel.append(o);
        });
      } catch {
        // Display error message if loading fails
        sel.innerHTML = '<option value="">Error al cargar autores</option>';
      }
    }

    /**
     * Load Tags from API
     * 
     * Fetches all available tags from the backend for autocomplete
     * functionality in the tag input system.
     */
    let allTags = []; // Global array to store all available tags
    async function loadTags() {
      try {
        const res = await fetch("/api/tags");
        allTags = await res.json(); // Store tags globally
      } catch {
        allTags = []; // Reset to empty array on error
      }
    }

    /**
     * Tag Management System Variables
     * 
     * DOM elements and references for the tag autocomplete system
     */
    const selTags = document.querySelector("#selected-tags");
    const inpTag = document.querySelector("#tag-input");
    const sugg = document.querySelector("#suggestions");
    const form = document.querySelector("#form-post");

    /**
     * Show Tag Suggestions
     * 
     * Displays filtered tag suggestions based on user input.
     * Provides both existing tag matches and option to create new tags.
     */
    function showSuggestions(q = "") {
      sugg.innerHTML = ""; // Clear previous suggestions
      if (!q.trim()) {
        sugg.classList.add("hidden");
        return;
      }

      // Filter existing tags by query (case-insensitive)
      const matches = allTags
        .filter((t) => t.name.toLowerCase().includes(q.toLowerCase()))
        .slice(0, 5); // Limit to 5 suggestions

      if (matches.length) {
        // Show existing tag matches in uppercase
        matches.forEach((t) => {
          const li = document.createElement("li");
          li.className = "suggestion-item";
          li.textContent = t.name.toUpperCase(); // Display in uppercase
          li.onclick = () => addTag(t); // Add existing tag
          sugg.append(li);
        });
      } else {
        // Show "create new" option when no matches found
        const li = document.createElement("li");
        li.className = "suggestion-item";
        li.innerHTML = `<strong>Crear nuevo:</strong> "${q.toUpperCase()}"`; // Show in uppercase
        li.onclick = async () => {
          // Create new tag via API
          try {
            const res = await fetch("/api/tags", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ name: q }),
            });
            const newTag = await res.json();
            allTags.push(newTag); // Add to local cache
            addTag(newTag);       // Add to selected tags
          } catch (error) {
            console.error("Error creating tag:", error);
            alert("Error al crear el tag. Inténtalo de nuevo.");
          }
        };
        sugg.append(li);
      }
      sugg.classList.remove("hidden"); // Show suggestions dropdown
    }

    /**
     * Add Tag to Selection
     * 
     * Adds a tag to the selected tags display and creates corresponding
     * hidden form inputs for submission.
     */
    function addTag(tag) {
      // Prevent duplicate tag addition
      if ([...selTags.children].some((s) => s.dataset.id == tag.id))
        return;
        
      // Create visual tag element with uppercase display
      const span = document.createElement("span");
      span.className = "selected-tag";
      span.dataset.id = tag.id; // Store tag ID for reference
      span.innerHTML = `${tag.name.toUpperCase()} <span class="remove">×</span>`; // Display in uppercase
      
      // Add remove functionality
      span.querySelector(".remove").onclick = () => {
        span.remove(); // Remove visual element
        // Remove corresponding hidden input
        form.querySelector(`input[data-for="${tag.id}"]`)?.remove();
      };
      selTags.append(span);

      // Create hidden input for form submission
      const hidden = document.createElement("input");
      hidden.type = "hidden";
      hidden.name = "tagIds";     // Form field name for tag IDs
      hidden.value = tag.id;      // Tag ID value
      hidden.dataset.for = tag.id; // Reference for removal
      form.append(hidden);

      // Clear input and hide suggestions
      inpTag.value = "";
      sugg.classList.add("hidden");
    }

    /**
     * Tag Input Event Listeners
     * 
     * Sets up interactive behavior for the tag input system
     */
    
    // Real-time suggestions as user types
    inpTag.addEventListener("input", (e) =>
      showSuggestions(e.target.value),
    );
    
    // Handle Enter key for quick tag creation
    inpTag.addEventListener("keydown", async (e) => {
      if (e.key === "Enter") {
        e.preventDefault(); // Prevent form submission
        const val = inpTag.value.trim();
        if (!val) return; // Ignore empty input
        
        // Check if tag already exists
        const existing = allTags.find(
          (t) => t.name.toLowerCase() === val.toLowerCase(),
        );
        if (existing) {
          addTag(existing); // Add existing tag
        } else {
          // Create new tag via API
          try {
            const res = await fetch("/api/tags", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ name: val }),
            });
            const nt = await res.json();
            allTags.push(nt); // Add to local cache
            addTag(nt);       // Add to selection
          } catch (error) {
            console.error("Error creating tag:", error);
            alert("Error al crear el tag. Inténtalo de nuevo.");
          }
        }
      }
    });
    
    // Hide suggestions when clicking outside tag container
    document.addEventListener("click", (e) => {
      if (!e.target.closest(".tags-container"))
        sugg.classList.add("hidden");
    });

    /**
     * Show Success Message
     * 
     * Displays a custom success modal instead of browser alert.
     * Provides better user experience with modern design.
     */
    function showSuccessMessage() {
      // Create success overlay
      const overlay = document.createElement('div');
      overlay.className = 'success-overlay';
      
      // Create success card content
      overlay.innerHTML = `
        <div class="success-card">
          <div class="success-icon"></div>
          <h3 class="success-title">¡Blog Publicado!</h3>
          <p class="success-description">
            Tu blog ha sido publicado exitosamente y ya está disponible para todos los lectores.
          </p>
          <div class="success-actions">
            <button class="success-btn" onclick="closeSuccessMessage()">
              Crear Otro Post
            </button>
            <a href="/blog" class="success-btn success-btn--secondary">
              Ver Blog
            </a>
          </div>
        </div>
      `;
      
      // Add to body
      document.body.appendChild(overlay);
      
      // Show with animation
      setTimeout(() => {
        overlay.classList.add('show');
      }, 100);
      
      // Store reference for closing
      window.currentSuccessOverlay = overlay;
    }

    /**
     * Close Success Message
     * 
     * Removes the success modal from the DOM.
     */
    function closeSuccessMessage() {
      const overlay = window.currentSuccessOverlay;
      if (overlay) {
        overlay.classList.remove('show');
        setTimeout(() => {
          overlay.remove();
          window.currentSuccessOverlay = null;
        }, 300);
      }
    }

    // Make closeSuccessMessage globally available
    window.closeSuccessMessage = closeSuccessMessage; 

    /**
     * Form Submission Handler
     * 
     * Handles the blog post creation form submission with comprehensive
     * validation, data preparation, and error handling.
     */
    form.addEventListener("submit", async (e) => {
      e.preventDefault(); // Prevent default form submission
      
      // Validate that editor has content
      if (!editor?.getData().trim()) {
        alert("Por favor, agrega contenido antes de publicar el artículo.");
        return;
      }
      
      // Extract HTML content from CKEditor and populate hidden field
      form.querySelector("input[name=content]").value = editor.getData();

      // Get submit button and update to loading state
      const btn = form.querySelector('button[type="submit"]');
      const originalText = btn.innerHTML;
      btn.disabled = true;           // Disable to prevent double submission
      btn.innerHTML = `
        <svg class="w-6 h-6 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
        </svg>
        <span>Publicando...</span>
      `; // Show loading text with spinner

      try {
        // Submit form data to API endpoint
        const resp = await fetch("/api/posts", {
          method: "POST",
          body: new FormData(form), // Use FormData for file upload support
        });
        
        // Check for HTTP errors
        if (!resp.ok) {
          const err = await resp.json().catch(() => ({}));
          throw new Error(err.message || resp.statusText);
        }
        
        // Success: Show custom success message instead of alert
        showSuccessMessage();
        form.reset();              // Clear all form fields
        selTags.innerHTML = "";    // Clear selected tags display
        editor.setData("");        // Clear editor content
        
      } catch (error) {
        // Error handling with user feedback
        console.error(error);
        alert("Error al publicar el blog: " + error.message);
      } finally {
        // Always restore button state regardless of outcome
        btn.disabled = false;
        btn.innerHTML = originalText;
      }
    });

    /**
     * Application Initialization
     * 
     * Initializes the blog creation interface by loading required data
     * from the backend APIs.
     */
    await loadAuthors(); // Populate author dropdown
    await loadTags();    // Cache tags for autocomplete
  </script>
</BaseLayout>