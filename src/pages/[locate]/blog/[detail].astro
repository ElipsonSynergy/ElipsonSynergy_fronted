---
export const prerender = false;

import { Image } from "astro:assets";
import BaseLayout from '../../../layouts/BaseLayout.astro';
import { useTranslations, languages, getLangFromUrl, getLocalizedPath } from '../../../utils/i18n';
import { getBlogBySlugServer, getBlogByIdServer, localizeBlog, getAllBlogsServer, localizeBlogs } from '../../../lib/blogsFirebase';
import type { SupportedLanguage, LocalizedBlog } from '../../../types/firebase';


// ===== i18n =====
export async function getStaticPaths() {
  return Object.keys(languages).map((loc) => ({
    params: { locate: loc },
  }));
}
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Function to generate localized links
function getLocalizedLink(path: string) {
  return getLocalizedPath(path, lang);
}

// ===== Parámetro dinámico =====
const detail = (Astro.params as Record<string, string>).detail!;

// Normaliza lo que viene en la URL
const detailParam = decodeURIComponent(detail).trim();

// ===== Resuelve desde Firebase con internacionalización =====
let blog: LocalizedBlog | null = null;

// Probamos ambas búsquedas en paralelo
const [firebaseBlogBySlug, firebaseBlogById] = await Promise.all([
  getBlogBySlugServer(detailParam),
  getBlogByIdServer(detailParam),
]);

const firebaseBlog = firebaseBlogBySlug ?? firebaseBlogById ?? null;

if (firebaseBlog) {
  blog = localizeBlog(firebaseBlog, lang as SupportedLanguage);
}

// logging de ayuda (aparece en consola del server)
console.log('[detail] param =', detailParam, 'foundBy', firebaseBlogBySlug ? 'slug' : firebaseBlogById ? 'id' : 'none');

// ===== Cabecera HTTP para cache del HTML =====
Astro.response.headers.set('Cache-Control', 'public, max-age=60, stale-while-revalidate=300');

// ===== Contenido HTML =====
// Si content es string, lo usamos tal cual; si viene un JSON sencillo tipo [{type:"paragraph", children:[{text:"..."}]}],
// lo convertimos a <p>...</p> de forma básica para no depender de reactJsonToHtmlString.
function richToHtml(content: any): string {
  if (!content) return '';

  // pequeño helper para no inyectar HTML accidental
  const esc = (s: string) =>
    s.replace(/&/g, '&amp;')
     .replace(/</g, '&lt;')
     .replace(/>/g, '&gt;');

  if (typeof content === 'string') {
    // normaliza saltos de línea: "\n" -> real
    let s = content.includes('\\n') ? content.replace(/\\n/g, '\n') : content;
    s = s.replace(/\r\n?/g, '\n');

    const lines = s.split('\n');
    const out: string[] = [];
    let para: string[] = [];

    const flushPara = () => {
      if (!para.length) return;
      // más espacio entre párrafos + mejor legibilidad
      out.push(`<p class="mb-6 leading-relaxed">${esc(para.join(' '))}</p>`);
      para = [];
    };

    for (const raw of lines) {
      const line = raw.trimEnd();

      // línea en blanco => cierra párrafo
      if (!line.trim()) {
        flushPara();
        continue;
      }

      // encabezados Markdown básicos
      let m: RegExpMatchArray | null;
      if ((m = line.match(/^###\s+(.*)$/))) {
        flushPara();
        out.push(`<h3 class="mt-8 mb-3 font-semibold text-xl">${esc(m[1])}</h3>`);
        continue;
      }
      if ((m = line.match(/^##\s+(.*)$/))) {
        flushPara();
        out.push(`<h2 class="mt-10 mb-4 font-bold text-2xl">${esc(m[1])}</h2>`);
        continue;
      }
      if ((m = line.match(/^#\s+(.*)$/))) {
        flushPara();
        out.push(`<h1 class="mt-12 mb-4 font-bold text-3xl">${esc(m[1])}</h1>`);
        continue;
      }

      // línea "normal" => acumula para párrafo
      para.push(line);
    }

    flushPara();
    return out.join('');
  }

  // Fallback para array tipo [{type:'paragraph', children:[{text:'...'}]}]
  try {
    if (Array.isArray(content)) {
      return content
        .map((n) =>
          n?.type === 'paragraph' && Array.isArray(n.children)
            ? `<p class="mb-6 leading-relaxed">${n.children.map((c: any) => esc(c?.text ?? '')).join('')}</p>`
            : ''
        )
        .join('');
    }
    return String(content);
  } catch {
    return '';
  }
}

const htmlContent = richToHtml(blog?.content);

// ===== Relacionados (recientes) =====
const firebaseBlogs = await getAllBlogsServer();
const allLocalizedBlogs = localizeBlogs(firebaseBlogs, lang as SupportedLanguage);
const related = blog 
  ? allLocalizedBlogs.filter((p) => p.id !== blog.id).slice(0, 5) 
  : allLocalizedBlogs.slice(0, 5);
---
<BaseLayout title={blog?.title || "Blog"}>
  {blog ? (
    <section class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-20">
        {blog.imageUrl ? (
            <Image
                src={blog.imageUrl}
                alt={blog.title}
                class="card-image"
                width={400}
                height={220}
            />
            ) : (
            <Image
                src="/banner.jpg"  
                alt={blog.title}
                class="card-image"
                width={400}
                height={220}
            />
            )}


      <div class="grid grid-cols-1 lg:grid-cols-3 gap-12">
        <!-- Contenido principal -->
        <div class="col-span-2 space-y-10">
          <div class="text-center">
            <h1 class="text-4xl font-bold text-gray-900">{blog.title}</h1>
            {blog.summary && <p class="text-lg text-gray-500">{blog.summary}</p>}
          </div>



          <div class="prose max-w-none prose-lg" set:html={htmlContent}></div>

          {blog.tags?.length && (
            <div class="flex flex-wrap gap-2 mt-6">
              {blog.tags.map((label: string) => (
                <span class="inline-block bg-gray-200 text-gray-700 px-3 py-1 rounded-full text-sm">#{label}</span>
              ))}
            </div>
          )}

          <div class="text-sm text-gray-500">
            {blog.createdAt && <>Publicado el: {new Date(blog.createdAt).toLocaleDateString()}</>}
          </div>

          {blog.author?.name && (
            <div class="border-t pt-6 mt-6">
              <p class="text-gray-600">Autor: {blog.author.name}</p>
            </div>
          )}
        </div>

        <!-- Sidebar -->
        <aside class="col-span-1">
          <div class="bg-gray-100 p-6 rounded-lg">
            <h2 class="text-xl font-bold mb-4">Artículos Populares</h2>
            <div class="space-y-4">
              {related.map((p) => (
                                 <a href={getLocalizedLink(`/blog/${p.slug ?? p.id}`)} class="block bg-white rounded-lg p-4 shadow hover:shadow-md transition">
                  <div class="font-semibold">{p.title}</div>
                  {p.summary && <div class="text-sm text-gray-500 mt-1 line-clamp-2">{p.summary}</div>}
                </a>
              ))}
            </div>
          </div>
        </aside>
      </div>
    </section>
  ) : (
    <div class="text-center py-20 text-red-600 font-semibold text-xl">
      Blog no encontrado.
    </div>
  )}
</BaseLayout>
