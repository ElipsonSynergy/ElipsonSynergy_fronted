---
// Blog detail page with Firebase and internationalization
import { Image } from "astro:assets";
import BaseLayout from '../../../layouts/BaseLayout.astro';
import { useTranslations, languages, getLangFromUrl, getLocalizedPath } from '../../../utils/i18n';
import { getAllBlogsServer, getBlogBySlugServer, getBlogByIdServer, localizeBlog } from '../../../lib/blogsFirebase';
import type { SupportedLanguage } from '../../../types/firebase';

export async function getStaticPaths() {
  const paths: any[] = [];
  
  // Get blogs from Firebase
  const firebaseBlogs = await getAllBlogsServer();
  
  // Generate paths for each language and each blog
  Object.keys(languages).forEach((lang) => {
    firebaseBlogs.forEach((blog) => {
      paths.push({
        params: { 
          locate: lang,
          detail: blog.slug 
        },
        props: { 
          blog,
          lang 
        }
      });
    });
  });
  
  return paths;
}

// Get params from URL
const { locate, detail } = Astro.params;
const lang = locate || getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Function to generate localized links
function getLocalizedLink(path: string) {
  return getLocalizedPath(path, lang);
}

// Find the blog by slug from Firebase
const blog = await getBlogBySlugServer(detail as string);

if (!blog) {
  return Astro.redirect('/404');
}

// Get localized blog data
const localizedBlog = localizeBlog(blog, lang as SupportedLanguage);

// Function to convert content to HTML (simplified version)
function contentToHtml(content: string): string {
  if (!content) return '';
  
  // Basic markdown-like processing
  const lines = content.split('\n');
  const htmlLines = lines.map(line => {
    line = line.trim();
    if (!line) return '<br/>';
    
    // Headers
    if (line.startsWith('# ')) {
      return `<h1 class="text-3xl font-bold text-gray-900 mb-4">${line.substring(2)}</h1>`;
    }
    if (line.startsWith('## ')) {
      return `<h2 class="text-2xl font-bold text-gray-900 mb-3">${line.substring(3)}</h2>`;
    }
    if (line.startsWith('### ')) {
      return `<h3 class="text-xl font-bold text-gray-900 mb-2">${line.substring(4)}</h3>`;
    }
    
    // Paragraphs
    return `<p class="mb-4 leading-relaxed text-gray-700">${line}</p>`;
  });
  
  return htmlLines.join('\n');
}

const htmlContent = contentToHtml(localizedBlog.content);

// Get other recent blogs for sidebar
const allBlogs = await getAllBlogsServer();
const recentBlogs = allBlogs
  .filter(b => b.id !== blog.id)
  .slice(0, 3)
  .map(b => localizeBlog(b, lang as SupportedLanguage));
---

<BaseLayout 
  title={localizedBlog.title}
  description={localizedBlog.summary}
>
  <section class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-20">
    <!-- Hero Image -->
    {localizedBlog.imageUrl ? (
      <div class="w-full h-64 md:h-96 mb-8 rounded-2xl overflow-hidden">
        <Image
          src={localizedBlog.imageUrl}
          alt={localizedBlog.title}
          class="w-full h-full object-cover"
          width={800}
          height={400}
        />
      </div>
    ) : (
      <div class="w-full h-64 md:h-96 mb-8 rounded-2xl overflow-hidden">
        <Image
          src="/banner.jpg"
          alt={localizedBlog.title}
          class="w-full h-full object-cover"
          width={800}
          height={400}
        />
      </div>
    )}

    <div class="grid grid-cols-1 lg:grid-cols-3 gap-12">
      <!-- Main Content -->
      <div class="col-span-2 space-y-8">
        <!-- Header -->
        <div class="space-y-4">
          <h1 class="text-4xl font-bold text-gray-900 leading-tight">{localizedBlog.title}</h1>
          {localizedBlog.summary && (
            <p class="text-xl text-gray-600 leading-relaxed">{localizedBlog.summary}</p>
          )}
          
          <!-- Meta Information -->
          <div class="flex items-center space-x-6 text-sm text-gray-500 border-b border-gray-200 pb-6">
            {localizedBlog.author?.name && (
              <div class="flex items-center space-x-2">
                {localizedBlog.author.avatarUrl ? (
                  <Image
                    src={localizedBlog.author.avatarUrl}
                    alt={localizedBlog.author.name}
                    class="w-8 h-8 rounded-full"
                    width={32}
                    height={32}
                  />
                ) : (
                  <div class="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center">
                    <span class="text-xs font-medium text-gray-600">
                      {localizedBlog.author.name.charAt(0).toUpperCase()}
                    </span>
                  </div>
                )}
                <span>{localizedBlog.author.name}</span>
              </div>
            )}
            
            {localizedBlog.createdAt && (
              <div>
                <span>{t('blog.published_on')}: {new Date(localizedBlog.createdAt).toLocaleDateString(lang === 'es' ? 'es-ES' : lang === 'en' ? 'en-US' : 'pt-BR')}</span>
              </div>
            )}
          </div>
        </div>

        <!-- Content -->
        <div class="prose prose-lg max-w-none" set:html={htmlContent}></div>

        <!-- Tags -->
        {localizedBlog.tags?.length > 0 && (
          <div class="border-t border-gray-200 pt-6">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">{t('blog.tags')}</h3>
            <div class="flex flex-wrap gap-2">
              {localizedBlog.tags.map((tag: string) => (
                <span class="inline-block bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-medium">
                  #{tag}
                </span>
              ))}
            </div>
          </div>
        )}
      </div>

      <!-- Sidebar -->
      <div class="space-y-8">
        <!-- Author Info -->
        {localizedBlog.author?.name && (
          <div class="bg-gray-50 rounded-xl p-6">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">{t('blog.about_author')}</h3>
            <div class="flex items-start space-x-4">
              {localizedBlog.author.avatarUrl ? (
                <Image
                  src={localizedBlog.author.avatarUrl}
                  alt={localizedBlog.author.name}
                  class="w-12 h-12 rounded-full"
                  width={48}
                  height={48}
                />
              ) : (
                <div class="w-12 h-12 bg-gray-300 rounded-full flex items-center justify-center">
                  <span class="text-lg font-medium text-gray-600">
                    {localizedBlog.author.name.charAt(0).toUpperCase()}
                  </span>
                </div>
              )}
              <div>
                <h4 class="font-semibold text-gray-900">{localizedBlog.author.name}</h4>
                <p class="text-sm text-gray-600 mt-1">{t('blog.author_bio')}</p>
              </div>
            </div>
          </div>
        )}

        <!-- Recent Posts -->
        {recentBlogs.length > 0 && (
          <div class="bg-white border border-gray-200 rounded-xl p-6">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">{t('blog.recent_posts')}</h3>
            <div class="space-y-4">
              {recentBlogs.map((recentBlog) => (
                <article class="border-b border-gray-100 last:border-b-0 pb-4 last:pb-0">
                  <a href={getLocalizedLink(`/blog/${recentBlog.slug}`)} class="block hover:text-blue-600 transition-colors">
                    <h4 class="font-medium text-gray-900 line-clamp-2 mb-1">{recentBlog.title}</h4>
                    <p class="text-sm text-gray-600 line-clamp-2">{recentBlog.summary}</p>
                    <time class="text-xs text-gray-500 mt-1 block">
                      {new Date(recentBlog.createdAt).toLocaleDateString(lang === 'es' ? 'es-ES' : lang === 'en' ? 'en-US' : 'pt-BR')}
                    </time>
                  </a>
                </article>
              ))}
            </div>
            
            <div class="mt-6 pt-4 border-t border-gray-100">
              <a 
                href={getLocalizedLink('/blog')} 
                class="text-blue-600 hover:text-blue-700 text-sm font-medium transition-colors"
              >
                {t('blog.view_all_posts')} →
              </a>
            </div>
          </div>
        )}

        <!-- Back to Blog -->
        <div class="text-center">
          <a 
            href={getLocalizedLink('/blog')} 
            class="inline-flex items-center px-6 py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 transition-colors"
          >
            ← {t('blog.back_to_blog')}
          </a>
        </div>
      </div>
    </div>
  </section>
</BaseLayout>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>