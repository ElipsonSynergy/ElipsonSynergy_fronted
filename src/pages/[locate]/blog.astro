---
/**
 * Blog Page Component (Firestore version)
 *
 * Lista de artículos con búsqueda, filtro por tags y paginación.
 * Ahora los datos se leen directamente desde Firebase Firestore.
 */

import BaseLayout from '../../layouts/BaseLayout.astro';
import BlogCard from "../../components/BlogCard.astro";
import { useTranslations, languages, getLangFromUrl } from '../../utils/i18n';
import { getAllBlogsServer, localizeBlogs } from '../../lib/blogsFirebase';
import type { SupportedLanguage } from '../../types/firebase';

/** Rutas estáticas por idioma */
export async function getStaticPaths() {
  return Object.keys(languages).map((loc) => ({
    params: { locate: loc },
  }));
}

let lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);



/** Parámetros de URL (búsqueda, filtro, paginación) */
const url = new URL(Astro.request.url);
const search = url.searchParams.get("search")?.toLowerCase() || "";
const tag = url.searchParams.get("tag") || t('blog_search_page_meta.all_button');
const pageNum = parseInt(url.searchParams.get("page") || "1", 10);

/** Paginación */
const pageSize = 9;

/** Carga de datos desde Firestore con internacionalización */
const firebaseBlogs = await getAllBlogsServer();
const posts = localizeBlogs(firebaseBlogs, lang as SupportedLanguage);

// Extract unique tags from localized blogs
const tagsData = Array.from(new Set(
  posts.flatMap(post => post.tags)
)).map(tag => ({ id: tag, name: tag }));

/** Lista de tags (en MAYÚSCULAS para el filtro visual) */
const allTags: string[] = [t('blog_search_page_meta.all_button'), ...tagsData.map((t) => (t.name ?? "").toUpperCase())];

/** Filtrado y slicing */
const filtered = posts.filter(
  (p) =>
    (p.title.toLowerCase().includes(search) ||
      p.summary.toLowerCase().includes(search)) &&
    (tag === t('blog_search_page_meta.all_button') || p.tags.some((t) => t.toUpperCase() === tag)),
);

const total = filtered.length;
const totalPages = Math.ceil(total / pageSize);
const start = (pageNum - 1) * pageSize;
const slice = filtered.slice(start, start + pageSize);
---

<BaseLayout title={t('blog_page_meta.title')}
  description={t('blog_page_meta.description')}
>
  <!-- Modern Hero Section with Blog Banner -->
  <section class="relative py-24 lg:py-32 bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 overflow-hidden">
    <!-- Background Elements -->
    <div class="absolute inset-0">
      <!-- Animated Grid -->
      <div class="absolute inset-0 opacity-5">
        <div class="grid grid-cols-8 grid-rows-6 gap-1 h-full w-full">
          {Array.from({length: 48}).map((_, i) => (
            <div class="bg-blue-500 rounded-sm animate-pulse" style={`animation-delay: ${i * 100}ms`}></div>
          ))}
        </div>
      </div>

      <!-- Floating Elements -->
      <div class="absolute top-20 left-20 w-4 h-4 bg-blue-500/20 rounded-full animate-bounce"></div>
      <div class="absolute top-40 right-40 w-6 h-6 bg-indigo-500/30 rotate-45 animate-pulse delay-500"></div>
      <div class="absolute bottom-32 left-1/4 w-3 h-3 bg-purple-500/25 rounded-full animate-ping delay-1000"></div>
    </div>

    <div class="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
      <h1 class="text-5xl md:text-6xl lg:text-7xl font-black mb-6 leading-tight tracking-tight">
        <span class="block text-slate-900 mb-2">{t('blogPage.hero.title')}</span>
        <span class="block bg-gradient-to-r from-blue-600 via-indigo-600 to-purple-600 bg-clip-text text-transparent">{t('blogPage.hero.subtitle')}</span>
      </h1>

      <p class="text-xl md:text-2xl font-semibold text-blue-600 mb-6">
        {t('blogPage.hero.description')}
      </p>

      <p class="max-w-4xl mx-auto text-lg md:text-xl text-slate-600 leading-relaxed">
        {t('blogPage.hero.description2')}
      </p>
    </div>
  </section>

  <!-- Search and Filter Section with Modern Design -->
  <section class="relative py-16 bg-white overflow-hidden">
    <!-- Background Pattern -->
    <div class="absolute inset-0 opacity-5">
      <div style="background-image: radial-gradient(circle at 1px 1px, rgba(59,130,246,0.15) 1px, transparent 0); background-size: 40px 40px;"></div>
    </div>

    <div class="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="bg-white rounded-3xl shadow-xl border border-slate-200 p-8 lg:p-12">
        <!-- Search Form with Modern Styling -->
        <div class="mb-8">
          <form method="get" class="max-w-2xl mx-auto">
            <div class="relative">
              <input
                type="text"
                name="search"
                placeholder={t('blog_search_page_meta.searching_placeholder')}
                value={search}
                aria-label={t('blog_search_page_meta.searching_blog')}
                class="w-full px-6 py-4 text-lg rounded-2xl border-2 border-slate-200 focus:border-blue-500 focus:ring-4 focus:ring-blue-500/20 outline-none transition-all duration-300 pr-14"
              />
              <button
                type="submit"
                aria-label={t('blog_search_page_meta.searching')}
                class="absolute right-3 top-1/2 transform -translate-y-1/2 p-2 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-xl hover:from-blue-700 hover:to-indigo-700 transition-all duration-300 hover:scale-105"
              >
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <circle cx="11" cy="11" r="8"></circle>
                  <path d="m21 21-4.35-4.35"></path>
                </svg>
              </button>
            </div>
          </form>
        </div>

        <!-- Tag Filter Navigation with Modern Pills -->
        <div class="flex flex-wrap justify-center gap-3 tags" role="navigation" aria-label="Filtros de categoría">
          {allTags.map((tname) => (
            <a
              class={`px-6 py-3 rounded-full font-semibold transition-all duration-300 hover:scale-105 tag ${
                tname === tag
                  ? "bg-gradient-to-r from-blue-600 to-indigo-600 text-white shadow-lg"
                  : "bg-slate-100 text-slate-700 hover:bg-slate-200 border border-slate-200"
              }`}
              href={`?tag=${encodeURIComponent(tname)}&search=${encodeURIComponent(search)}`}
              aria-label={`Filtrar por ${tname}`}
            >
              {tname}
            </a>
          ))}
        </div>
      </div>
    </div>
  </section>

  <!-- Blog Posts Grid Section with Modern Layout -->
  <section class="relative py-16 bg-gradient-to-br from-slate-50 to-blue-50 overflow-hidden" aria-label="Lista de artículos del blog">
    <div class="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <!-- No Results Message with Modern Styling -->
      <div class="no-results bg-white rounded-3xl shadow-lg border border-slate-200 p-12 text-center mx-auto max-w-2xl" style="display: none;" role="status" aria-live="polite">
        <div class="w-20 h-20 bg-gradient-to-r from-slate-400 to-slate-500 rounded-2xl flex items-center justify-center mx-auto mb-6">
          <svg class="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.34 0-4.44-1.01-5.93-2.62C8.08 10.83 10.92 10 12 10a7.96 7.96 0 016 2.709M6.343 6.343L19.657 19.657"></path>
          </svg>
        </div>
        <h3 class="text-2xl font-bold text-slate-900 mb-4">{t('blogPage.noResults.title')}</h3>
        <p class="text-lg text-slate-600">{t('blogPage.noResults.description')}</p>
      </div>

      <!-- Blog Post Cards Grid -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
        {slice.map((post) => <BlogCard post={post} />)}
      </div>
    </div>
  </section>

  <!-- Pagination Navigation with Modern Design -->
  {totalPages > 0 && (
    <section class="relative py-16 bg-white">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <nav class="flex justify-center" role="navigation" aria-label="Navegación de páginas">
          <div class="flex items-center space-x-2 bg-slate-100 rounded-2xl p-2">
            {/* Previous Arrow */}
            {totalPages > 1 && pageNum > 1 && (
              <a
                class="flex items-center justify-center w-12 h-12 rounded-xl bg-white text-slate-600 hover:bg-gradient-to-r hover:from-blue-600 hover:to-indigo-600 hover:text-white transition-all duration-300 hover:scale-105 shadow-sm"
                href={`?page=${pageNum - 1}&tag=${encodeURIComponent(tag)}&search=${encodeURIComponent(search)}`}
                aria-label="Página anterior"
              >
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
              </a>
            )}

            {/* Page Number Links */}
            {Array.from({ length: totalPages }, (_, i) => (
              <a
                class={`flex items-center justify-center min-w-12 h-12 px-4 rounded-xl font-semibold transition-all duration-300 hover:scale-105 ${
                  i + 1 === pageNum
                    ? "bg-gradient-to-r from-blue-600 to-indigo-600 text-white shadow-lg"
                    : "bg-white text-slate-600 hover:bg-slate-50 shadow-sm"
                }`}
                href={`?page=${i + 1}&tag=${encodeURIComponent(tag)}&search=${encodeURIComponent(search)}`}
                aria-label={
                  i + 1 === pageNum
                    ? `Página actual: ${i + 1}`
                    : `Ir a página ${i + 1}`
                }
              >
                {i + 1}
              </a>
            ))}

            {/* Next Arrow */}
            {totalPages > 1 && pageNum < totalPages && (
              <a
                class="flex items-center justify-center w-12 h-12 rounded-xl bg-white text-slate-600 hover:bg-gradient-to-r hover:from-blue-600 hover:to-indigo-600 hover:text-white transition-all duration-300 hover:scale-105 shadow-sm"
                href={`?page=${pageNum + 1}&tag=${encodeURIComponent(tag)}&search=${encodeURIComponent(search)}`}
                aria-label="Página siguiente"
              >
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
              </a>
            )}
          </div>
        </nav>
      </div>
    </section>
  )}

  <!-- Client-Side Interactive Functionality -->
  <script type="module">
    /** @type {HTMLAnchorElement[]} */
    const tagButtons = Array.from(
      document.querySelectorAll(".tags .tag"),
    );
    /** @type {HTMLElement[]} */
    const postCards = Array.from(
      document.querySelectorAll(".card.post-card"),
    );
    /** @type {HTMLFormElement | null} */
    const form = document.querySelector("form[method='get']");
    /** @type {HTMLInputElement | null} */
    const searchInput =
      form?.querySelector('input[name="search"]') ?? null;
    /** @type {HTMLElement | null} */
    const noResultsEl = document.querySelector(".no-results");
    /** @type {string[]} */
    let selectedTags = [];
    /** @type {string} */
    let searchTerm = searchInput?.value.trim().toLowerCase() || "";

    // Maneja el submit: evita recarga, toma el valor y filtra
    form?.addEventListener("submit", (e) => {
      e.preventDefault();
      if (!searchInput) return;
      searchTerm = searchInput.value.trim().toLowerCase();
      filterPosts();
    });

    function updateUI() {
      tagButtons.forEach((btn) => {
        const name = btn.textContent?.trim().toUpperCase() || "";
        btn.classList.toggle(
          "active",
          name === t('blog_search_page_meta.all_button')
            ? selectedTags.length === 0
            : selectedTags.includes(name),
        );
      });
    }

    function filterPosts() {
      let anyVisible = false;
      postCards.forEach((card) => {
        // tags
        const tagsAttr = card.getAttribute("data-tags") || "";
        const cardTags = tagsAttr
          .split(",")
          .map((t) => t.trim().toUpperCase());
        const matchesTag =
          selectedTags.length === 0 ||
          selectedTags.some((tag) => cardTags.includes(tag));

        // búsqueda
        const hayTagsTxt = tagsAttr
          .toLowerCase()
          .includes(searchTerm);
        const title = (card.getAttribute("data-title") || "").toLowerCase();
        const summary = (card.getAttribute("data-summary") || "").toLowerCase();
        const content = (card.getAttribute("data-content") || "").toLowerCase();
        const author = (card.getAttribute("data-author") || "").toLowerCase();
        const slug = (card.getAttribute("data-slug") || "").toLowerCase();
        const hayTexto = [
          title,
          summary,
          content,
          author,
          slug,
          hayTagsTxt ? tagsAttr.toLowerCase() : "",
        ].some((field) => field.includes(searchTerm));

        const visible =
          matchesTag && (searchTerm === "" || hayTexto);
        card.style.display = visible ? "" : "none";
        if (visible) anyVisible = true;
      });

      // muestra/oculta "no results"
      if (noResultsEl) {
        noResultsEl.style.display = anyVisible ? "none" : "";
      }
    }

    tagButtons.forEach((btn) => {
      btn.addEventListener("click", (e) => {
        e.preventDefault();
        const name = btn.textContent?.trim().toUpperCase() || "";
        if (name === t('blog_search_page_meta.all_button')) {
          selectedTags = [];
        } else {
          const idx = selectedTags.indexOf(name);
          if (idx >= 0) selectedTags.splice(idx, 1);
          else selectedTags.push(name);
        }
        updateUI();
        filterPosts();
      });
    });

    // Initialize
    updateUI();
    filterPosts();
  </script>
</BaseLayout>
