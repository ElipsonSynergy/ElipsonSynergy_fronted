---
import BaseLayout from '@/layouts/BaseLayout.astro';
import ContactModel from '@/components/ContactModel.astro';
import infoData from '@/data/info';
import { useTranslations } from '@/utils/i18n';

export async function getStaticPaths() {
  return [
    { params: { locate: 'es' } },
    { params: { locate: 'en' } },
    { params: { locate: 'por' } }
  ];
}

const { locate } = Astro.params;
const lang = (locate as 'es' | 'en' | 'por') || 'es';
const t = useTranslations(lang);
---

<BaseLayout 
  title={t('contact_page_meta.title')}
  description={t('contact_page_meta.description')}
>
  
  <section class="relative z-10 overflow-hidden bg-white py-8 sm:py-12 md:py-16 lg:py-20" id="contact">
    <div class="container mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex flex-col lg:flex-row lg:items-start lg:justify-between gap-8 lg:gap-12 xl:gap-16">
        
        <!-- Contact Information -->
        <div class="w-full lg:w-1/2 xl:w-6/12">
          <div class="max-w-full lg:max-w-[570px]">
            <span class="mb-3 block text-base font-semibold text-blue-600 sm:mb-4">
              {t('contact_page_header.badge')}
            </span>
            <h1 class="mb-4 text-2xl sm:text-3xl font-bold uppercase text-gray-900 lg:text-[36px] xl:text-[40px] leading-tight">
              {t('contact_page_header.title')}
            </h1>
            <p class="mb-6 sm:mb-8 text-base leading-relaxed text-gray-600">
              {t('contact_page_header.description')}
            </p>
            
            <div class="space-y-4 sm:space-y-6">
              <!-- Location -->
              <div class="flex items-start space-x-3 sm:space-x-4">
                <div class="flex-shrink-0 w-10 h-10 sm:w-12 sm:h-12 lg:w-14 lg:h-14 bg-blue-50 rounded-lg flex items-center justify-center">
                  <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 sm:w-6 sm:h-6 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                    <path stroke-linecap="round" stroke-linejoin="round" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                  </svg>
                </div>
                <div class="min-w-0 flex-1">
                  <h3 class="font-bold text-gray-800 text-sm sm:text-base lg:text-lg">{t('contact_page_info.location_title')}</h3>
                  <p class="text-gray-600 text-sm sm:text-base break-words">{infoData.location}</p>
                </div>
              </div>
              <!-- Phone -->
              <div class="flex items-start space-x-3 sm:space-x-4">
                <div class="flex-shrink-0 w-10 h-10 sm:w-12 sm:h-12 lg:w-14 lg:h-14 bg-blue-50 rounded-lg flex items-center justify-center">
                  <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 sm:w-6 sm:h-6 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                  </svg>
                </div>
                <div class="min-w-0 flex-1">
                  <h3 class="font-bold text-gray-800 text-sm sm:text-base lg:text-lg">{t('contact_page_info.phone_title')}</h3>
                  <p class="text-gray-600 text-sm sm:text-base">{infoData.tel}</p>
                </div>
              </div>
              
              <!-- Email -->
              <div class="flex items-start space-x-3 sm:space-x-4">
                <div class="flex-shrink-0 w-10 h-10 sm:w-12 sm:h-12 lg:w-14 lg:h-14 bg-blue-50 rounded-lg flex items-center justify-center">
                  <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 sm:w-6 sm:h-6 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2v10a2 2 0 002 2z" />
                  </svg>
                </div>
                <div class="min-w-0 flex-1">
                  <h3 class="font-bold text-gray-800 text-sm sm:text-base lg:text-lg">{t('contact_page_info.email_title')}</h3>
                  <p class="text-gray-600 text-sm sm:text-base break-all">{infoData.mail}</p>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Contact Form -->
        <div class="w-full lg:w-1/2 xl:w-5/12 lg:flex lg:justify-center">
          <div class="relative rounded-2xl bg-white p-4 sm:p-6 lg:p-8 shadow-lg border border-gray-100 w-full max-w-lg mx-auto lg:mx-0">
            <form id="contact-form" class="space-y-4 sm:space-y-5 lg:space-y-6" novalidate>
              <div>
                <input
                  type="text"
                  id="name"
                  name="name"
                  placeholder={t('contact_form_fields.name_placeholder')}
                  class="w-full rounded-lg border border-gray-300 px-3 sm:px-4 py-2.5 sm:py-3 text-sm sm:text-base text-gray-700 outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200"
                  required
                  maxlength="50"
                />
                <p id="name-error" class="mt-1 text-xs sm:text-sm text-red-600 hidden"></p>
              </div>
              
              <div>
                <input
                  type="email"
                  id="email"
                  name="email"
                  placeholder={t('contact_form_fields.email_placeholder')}
                  class="w-full rounded-lg border border-gray-300 px-3 sm:px-4 py-2.5 sm:py-3 text-sm sm:text-base text-gray-700 outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200"
                  required
                  maxlength="100"
                />
                <p id="email-error" class="mt-1 text-xs sm:text-sm text-red-600 hidden"></p>
              </div>
              
              <div>
                <input
                  type="tel"
                  id="phone"
                  name="phone"
                  placeholder={t('contact_form_fields.phone_placeholder')}
                  class="w-full rounded-lg border border-gray-300 px-3 sm:px-4 py-2.5 sm:py-3 text-sm sm:text-base text-gray-700 outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200"
                  maxlength="20"
                />
                <p id="phone-error" class="mt-1 text-xs sm:text-sm text-red-600 hidden"></p>
              </div>
              
              <div>
                <textarea
                  rows="4"
                  id="message"
                  name="message"
                  placeholder={t('contact_form_fields.message_placeholder')}
                  class="w-full rounded-lg border border-gray-300 px-3 sm:px-4 py-2.5 sm:py-3 text-sm sm:text-base text-gray-700 outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200 resize-none min-h-[100px]"
                  required
                  maxlength="1000"
                ></textarea>
                <div class="flex justify-between items-center mt-1">
                  <p id="message-error" class="text-xs sm:text-sm text-red-600 hidden"></p>
                  <span id="message-counter" class="text-xs text-gray-500 ml-auto">0/1000</span>
                </div>
              </div>
              
              <div class="pt-2">
                <button
                  type="submit"
                  id="submit-btn"
                  class="w-full rounded-lg border border-blue-600 bg-blue-600 px-4 py-3 sm:py-3.5 text-white font-medium text-sm sm:text-base lg:text-lg transition-all duration-200 hover:bg-blue-700 hover:border-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-70 disabled:cursor-not-allowed active:scale-[0.98]"
                >
                  {t('contact_form_fields.submit_button')}
                </button>
              </div>
            </form>
            
            <!-- Decorative Elements -->
            <span class="absolute -right-6 sm:-right-9 -top-6 sm:-top-10 z-[-1] hidden xl:block">
              <svg width="80" height="80" class="sm:w-[100px] sm:h-[100px]" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path fill-rule="evenodd" clip-rule="evenodd" d="M0 100C0 44.7715 0 0 0 0C55.2285 0 100 44.7715 100 100C100 100 100 100 0 100Z" fill="#3b82f6" fill-opacity="0.05"/>
              </svg>
            </span>
            
            <span class="absolute -right-6 sm:-right-10 top-[70px] sm:top-[90px] z-[-1] hidden xl:block">
              <svg width="28" height="110" class="sm:w-[34px] sm:h-[134px]" viewBox="0 0 34 134" fill="none" xmlns="http://www.w3.org/2000/svg">
                <circle cx="31.9993" cy="132" r="1.66667" transform="rotate(180 31.9993 132)" fill="#3b82f6" fill-opacity="0.05"/>
                <circle cx="31.9993" cy="117.333" r="1.66667" transform="rotate(180 31.9993 117.333)" fill="#3b82f6" fill-opacity="0.05"/>
                <circle cx="31.9993" cy="102.667" r="1.66667" transform="rotate(180 31.9993 102.667)" fill="#3b82f6" fill-opacity="0.05"/>
                <circle cx="31.9993" cy="88" r="1.66667" transform="rotate(180 31.9993 88)" fill="#3b82f6" fill-opacity="0.05"/>
                <circle cx="31.9993" cy="73.3333" r="1.66667" transform="rotate(180 31.9993 73.3333)" fill="#3b82f6" fill-opacity="0.05"/>
                <circle cx="31.9993" cy="45" r="1.66667" transform="rotate(180 31.9993 45)" fill="#3b82f6" fill-opacity="0.05"/>
                <circle cx="31.9993" cy="16" r="1.66667" transform="rotate(180 31.9993 16)" fill="#3b82f6" fill-opacity="0.05"/>
                <circle cx="31.9993" cy="59" r="1.66667" transform="rotate(180 31.9993 59)" fill="#3b82f6" fill-opacity="0.05"/>
                <circle cx="31.9993" cy="30.6666" r="1.66667" transform="rotate(180 31.9993 30.6666)" fill="#3b82f6" fill-opacity="0.05"/>
                <circle cx="31.9993" cy="1.66665" r="1.66667" transform="rotate(180 31.9993 1.66665)" fill="#3b82f6" fill-opacity="0.05"/>
              </svg>
            </span>
            
            <span class="absolute -bottom-4 sm:-bottom-7 -left-4 sm:-left-7 z-[-1] hidden xl:block">
              <svg width="85" height="110" class="sm:w-[107px] sm:h-[134px]" viewBox="0 0 107 134" fill="none" xmlns="http://www.w3.org/2000/svg">
                <circle cx="104.999" cy="132" r="1.66667" transform="rotate(180 104.999 132)" fill="#3b82f6" fill-opacity="0.05"/>
                <circle cx="104.999" cy="117.333" r="1.66667" transform="rotate(180 104.999 117.333)" fill="#3b82f6" fill-opacity="0.05"/>
                <circle cx="104.999" cy="102.667" r="1.66667" transform="rotate(180 104.999 102.667)" fill="#3b82f6" fill-opacity="0.05"/>
                <circle cx="104.999" cy="88" r="1.66667" transform="rotate(180 104.999 88)" fill="#3b82f6" fill-opacity="0.05"/>
                <circle cx="104.999" cy="73.3333" r="1.66667" transform="rotate(180 104.999 73.3333)" fill="#3b82f6" fill-opacity="0.05"/>
                <circle cx="104.999" cy="45" r="1.66667" transform="rotate(180 104.999 45)" fill="#3b82f6" fill-opacity="0.05"/>
                <circle cx="104.999" cy="16" r="1.66667" transform="rotate(180 104.999 16)" fill="#3b82f6" fill-opacity="0.05"/>
                <circle cx="104.999" cy="59" r="1.66667" transform="rotate(180 104.999 59)" fill="#3b82f6" fill-opacity="0.05"/>
                <circle cx="104.999" cy="30.6666" r="1.66667" transform="rotate(180 104.999 30.6666)" fill="#3b82f6" fill-opacity="0.05"/>
                <circle cx="104.999" cy="1.66665" r="1.66667" transform="rotate(180 104.999 1.66665)" fill="#3b82f6" fill-opacity="0.05"/>
              </svg>
            </span>
          </div>
        </div>
      </div>
    </div>
  </section>
  
  <ContactModel translations={t} />
  
  <script is:inline>
    document.addEventListener('DOMContentLoaded', () => {
      const form = document.getElementById('contact-form');
      const submitBtn = document.getElementById('submit-btn');
      const modal = document.getElementById('contact-modal');
      const loadingOverlay = document.getElementById('loading-overlay');
      
      if (!form || !submitBtn || !modal || !loadingOverlay) {
        console.error('Error: No se encontraron todos los elementos del formulario de contacto.');
        return;
      }
      
      const modalContent = document.getElementById('modal-content');
      const closeBtn = document.getElementById('modal-close');
      const okBtn = document.getElementById('modal-ok-btn');
      let isSubmitting = false;
      
      // --- Contact Entity ---
      class Contact {
        constructor(name, email, message, phone = '') {
          this.name = name;
          this.email = email;
          this.message = message;
          this.phone = phone;
        }
      }
      
      // --- Email Validation Service (Now using local API) ---
      class MailValidationService {
        static async validateEmailAddress(email) {
          console.log(`Starting email validation for: ${email}`);
          
          try {
            const response = await fetch('/api/validate-email', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ email })
            });
            
            if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const result = await response.json();
            
            if (!result.success) {
              throw new Error(result.error || 'Email validation failed');
            }
            
            console.log(`Email validation result for ${email}:`, result);
            
            return {
              isValid: result.isValid,
              reason: result.reason,
              skipValidation: result.skipValidation,
              details: result.details
            };
            
          } catch (error) {
            console.error('Email validation service error:', error.message);
            return {
              isValid: true,
              reason: `Validation service temporarily unavailable: ${error.message}`,
              serviceError: true,
              skipValidation: true
            };
          }
        }
        
        static isValidEmailFormat(email) {
          const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
          return emailRegex.test(email);
        }
      }
      
      // --- Mail Service (Now using local API) ---
      class MailService {
        static async sendContactEmail(contact) {
          try {
            const response = await fetch('/api/send-email', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                name: contact.name,
                email: contact.email,
                message: contact.message,
                phone: contact.phone
              })
            });
            
            if (!response.ok) {
              const errorData = await response.json();
              throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
            }
            
            const result = await response.json();
            
            if (!result.success) {
              throw new Error(result.error || 'Failed to send email');
            }
            
            console.log('Email sent successfully');
            return result;
            
          } catch (error) {
            console.error('Mail service error:', error.message);
            throw error;
          }
        }
      }
      
      // --- UI Functions ---
      const showLoading = (show) => {
        loadingOverlay.classList.toggle('hidden', !show);
        if (show) {
          window.resetProgress && window.resetProgress();
        }
      };
      
      const showModal = (title, message, isSuccess) => {
        const modalTitle = modal.querySelector('#modal-title');
        const modalMessage = modal.querySelector('#modal-message');
        const successIcon = modal.querySelector('#success-icon');
        const errorIcon = modal.querySelector('#error-icon');
        const modalIcon = document.getElementById('modal-icon');
        const statusBar = document.getElementById('modal-status-bar');
        
        if(modalTitle) modalTitle.textContent = title;
        if(modalMessage) modalMessage.textContent = message;
        
        // Update styles based on success/error
        if (isSuccess) {
          modalIcon.className = 'w-16 h-16 rounded-full flex items-center justify-center shadow-lg bg-gradient-to-r from-green-500 to-emerald-500';
          statusBar.className = 'w-20 h-1.5 rounded-full mb-6 mx-auto bg-gradient-to-r from-green-400 to-emerald-500';
          modalTitle.className = 'text-2xl font-bold mb-3 text-green-800';
          successIcon?.classList.remove('hidden');
          errorIcon?.classList.add('hidden');
        } else {
          modalIcon.className = 'w-16 h-16 rounded-full flex items-center justify-center shadow-lg bg-gradient-to-r from-red-500 to-pink-500';
          statusBar.className = 'w-20 h-1.5 rounded-full mb-6 mx-auto bg-gradient-to-r from-red-400 to-pink-500';
          modalTitle.className = 'text-2xl font-bold mb-3 text-red-800';
          successIcon?.classList.add('hidden');
          errorIcon?.classList.remove('hidden');
        }
        
        modal.classList.remove('hidden');
        setTimeout(() => modalContent.classList.remove('scale-95', 'opacity-0'), 10);
      };
      
      const hideModal = () => {
        modalContent.classList.add('scale-95', 'opacity-0');
        setTimeout(() => modal.classList.add('hidden'), 300);
      };
      
      // --- Validation ---
      const showError = (fieldId, message) => {
        const errorElement = document.getElementById(`${fieldId}-error`);
        const inputElement = document.getElementById(fieldId);
        
        if(errorElement) {
          errorElement.textContent = message;
          errorElement.classList.remove('hidden');
        }
        
        if (inputElement) {
          inputElement.classList.remove('border-gray-300', 'focus:border-blue-500');
          inputElement.classList.add('border-red-500', 'focus:border-red-500');
        }
      };
      
      const clearErrors = () => {
        document.querySelectorAll('p[id$="-error"]').forEach(p => p.classList.add('hidden'));
        document.querySelectorAll('input, textarea').forEach(input => {
          input.classList.remove('border-red-500', 'focus:border-red-500');
          input.classList.add('border-gray-300', 'focus:border-blue-500');
        });
      };
      
      const validateForm = () => {
        clearErrors();
        let isValid = true;
        
        const name = form.elements.name.value.trim();
        const email = form.elements.email.value.trim();
        const message = form.elements.message.value.trim();
        
        if (name.length < 2) {
          showError('name', 'El nombre debe tener al menos 2 caracteres.');
          isValid = false;
        }
        
        if (!MailValidationService.isValidEmailFormat(email)) {
          showError('email', 'Por favor, introduce un correo válido.');
          isValid = false;
        }
        
        if (message.length < 10) {
          showError('message', 'El mensaje debe tener al menos 10 caracteres.');
          isValid = false;
        } else if (message.length > 1000) {
          showError('message', 'El mensaje no puede exceder los 1000 caracteres.');
          isValid = false;
        }
        
        return isValid;
      };
      
      // --- Contact Controller ---
      class ContactController {
        static async store(formData) {
          console.log('Contact form submission received');
          
          const contact = new Contact(formData.name, formData.email, formData.message, formData.phone);
          
          try {
            // Update progress: Starting email validation
            window.updateProgress && window.updateProgress(1, 25);
            
            // Email Validation
            console.log(`Validating email address: ${contact.email}`);
            const emailValidation = await MailValidationService.validateEmailAddress(contact.email);
            
            if (!emailValidation.isValid && !emailValidation.skipValidation) {
              console.warn(`Email validation failed for ${contact.email}: ${emailValidation.reason}`);
              throw new Error(emailValidation.reason);
            }
            
            if (emailValidation.skipValidation) {
              console.log(`Email validation skipped for ${contact.email}: ${emailValidation.reason}`);
            } else {
              console.log(`Email validation passed for ${contact.email}`);
            }
            
            // Update progress: Email validated, sending email
            window.updateProgress && window.updateProgress(2, 75);
            
            // Send email
            await MailService.sendContactEmail(contact);
            
            // Update progress: Complete
            window.updateProgress && window.updateProgress(2, 100);
            
            console.log('Contact email successfully sent');
            
            return {
              success: true,
              message: 'Message sent successfully'
            };
            
          } catch (error) {
            console.error('Contact form processing failed: ' + error.message);
            throw error;
          }
        }
      }
      
      // --- Form Submission ---
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        if (!validateForm() || isSubmitting) return;
        
        isSubmitting = true;
        submitBtn.disabled = true;
        const originalText = submitBtn.textContent;
        submitBtn.innerHTML = `
          <div class="flex items-center justify-center space-x-2">
            <div class="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
            <span>Enviando...</span>
          </div>
        `;
        showLoading(true);
        
        const formData = {
          name: form.elements.name.value.trim(),
          email: form.elements.email.value.trim(),
          phone: form.elements.phone.value.trim(),
          message: form.elements.message.value.trim(),
        };
        
        try {
          const result = await ContactController.store(formData);
          
          showModal('¡Mensaje Enviado!', 'Gracias por contactarnos. Te responderemos lo antes posible.', true);
          form.reset();
          document.getElementById('message-counter').textContent = '0/1000';
          
        } catch (error) {
          console.error('Error al enviar el formulario:', error);
          let errorMessage = 'Hubo un problema al enviar tu mensaje. Por favor, inténtalo de nuevo más tarde.';
          
          if (error.message.includes('Invalid email') || error.message.includes('format is invalid')) {
            errorMessage = 'El correo electrónico no es válido. Por favor verifica e intenta de nuevo.';
          } else if (error.message.includes('mail servers')) {
            errorMessage = 'El dominio del correo no tiene servidores de mail configurados.';
          } else if (error.message.includes('mailbox does not exist')) {
            errorMessage = 'La dirección de correo no existe o no puede recibir emails.';
          } else if (error.message.includes('Disposable email')) {
            errorMessage = 'No se permiten correos temporales o desechables.';
          } else if (error.message.includes('Email service not configured')) {
            errorMessage = 'El servicio de correo no está configurado correctamente.';
          } else if (error.message.includes('Failed to send email')) {
            errorMessage = 'Error en el servicio de envío de correos. Inténtalo más tarde.';
          } else if (error.message) {
            errorMessage = error.message;
          }
          
          showModal('Error', errorMessage, false);
        } finally {
          isSubmitting = false;
          submitBtn.disabled = false;
          submitBtn.textContent = originalText;
          showLoading(false);
        }
      });
      
      // --- Event Listeners ---
      closeBtn?.addEventListener('click', hideModal);
      okBtn?.addEventListener('click', hideModal);
      
      // Character counter
      const messageField = document.getElementById('message');
      const counter = document.getElementById('message-counter');
      messageField?.addEventListener('input', () => {
        const length = messageField.value.length;
        counter.textContent = `${length}/1000`;
        
        if (length > 900) {
          counter.classList.add('text-orange-500');
          counter.classList.remove('text-red-500');
        } else if (length > 950) {
          counter.classList.add('text-red-500');
          counter.classList.remove('text-orange-500');
        } else {
          counter.classList.remove('text-orange-500', 'text-red-500');
        }
      });
      
      // Real-time email validation
      const emailField = document.getElementById('email');
      let emailValidationTimeout;
      
      emailField?.addEventListener('input', () => {
        clearTimeout(emailValidationTimeout);
        const errorElement = document.getElementById('email-error');
        
        // Clear previous error
        if (errorElement && !errorElement.classList.contains('hidden')) {
          errorElement.classList.add('hidden');
          emailField.classList.remove('border-red-500', 'focus:border-red-500');
          emailField.classList.add('border-gray-300', 'focus:border-blue-500');
        }
        
        const email = emailField.value.trim();
        if (email && MailValidationService.isValidEmailFormat(email)) {
          // Validate email with API after 1 second of no typing
          emailValidationTimeout = setTimeout(async () => {
            try {
              const validation = await MailValidationService.validateEmailAddress(email);
              if (!validation.isValid && !validation.skipValidation) {
                showError('email', validation.reason);
              }
            } catch (error) {
              console.warn('Real-time email validation failed:', error.message);
            }
          }, 1000);
        }
      });
    });
  </script>
</BaseLayout>