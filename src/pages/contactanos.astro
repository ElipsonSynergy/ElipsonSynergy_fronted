---
import BaseLayout from '@/layouts/BaseLayout.astro';
import ContactModel from '@/components/ContactModel.astro';
import infoData from '@/data/info';

// Logic for determining the backend URL
function getBackendUrl() {
  if (import.meta.env.PUBLIC_BACKEND_URL) {
    return import.meta.env.PUBLIC_BACKEND_URL;
  }
  if (import.meta.env.PROD) {
    return ''; 
  }
  return 'http://localhost:8000';
}
const backendUrl = getBackendUrl();
---

<BaseLayout 
  title="Contacto - Elipson Synergy" 
  description="Ponte en contacto con Elipson Synergy. Estamos listos para ayudarte a transformar tus ideas en realidad digital."
>
  
  <section class="bg-white py-20 lg:py-24" id="contact">
    <div class="container mx-auto px-4">
      <div class="grid md:grid-cols-2 gap-16 items-center">

        <div class="space-y-10">
          <div>
            <!-- Cambio 1: Encabezados reorganizados -->
            <h1 class="text-4xl lg:text-5xl font-bold text-gray-900 mt-2 mb-4 uppercase">
              PONTE EN CONTACTO CON NOSOTROS
            </h1>
            <span class="text-blue-600 font-semibold">Contáctanos</span>
            <p class="text-gray-600 max-w-lg leading-relaxed mt-4">
              Agradecemos tu mensaje y nos comprometemos a brindarte la mejor atención. Revisaremos tu solicitud y nos comunicaremos contigo pronto. Valoramos tu tiempo y apreciamos la oportunidad de ayudarte.
            </p>
          </div>

          <div class="space-y-6">
            <div class="flex items-center space-x-4">
              <div class="flex-shrink-0 w-12 h-12 bg-blue-50 rounded-lg flex items-center justify-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                </svg>
              </div>
              <div>
                <h3 class="font-bold text-gray-800 text-lg">Nuestra Ubicación</h3>
                <p class="text-gray-600">{infoData.location}</p>
              </div>
            </div>
            <div class="flex items-center space-x-4">
              <div class="flex-shrink-0 w-12 h-12 bg-blue-50 rounded-lg flex items-center justify-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                </svg>
              </div>
              <div>
                <h3 class="font-bold text-gray-800 text-lg">Número de Teléfono</h3>
                <p class="text-gray-600">{infoData.tel}</p>
              </div>
            </div>
            <div class="flex items-center space-x-4">
              <div class="flex-shrink-0 w-12 h-12 bg-blue-50 rounded-lg flex items-center justify-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                </svg>
              </div>
              <div>
                <h3 class="font-bold text-gray-800 text-lg">Correo Electrónico</h3>
                <p class="text-gray-600">{infoData.mail}</p>
              </div>
            </div>
          </div>
        </div>

        <div class="bg-white/80 border border-gray-200 backdrop-blur-sm shadow-sm hover:shadow-md transition-shadow p-8 lg:p-12 rounded-2xl">
          <form id="contact-form" class="space-y-8" novalidate>
            <div>
              <label for="name" class="hidden">Nombre completo</label>
              <input type="text" id="name" name="name" placeholder="Tu nombre" class="w-full bg-transparent border-b-2 border-gray-200 py-3 text-gray-800 placeholder-gray-400 focus:border-blue-500 focus:outline-none transition-colors" required maxlength="50" />
              <p id="name-error" class="mt-2 hidden text-sm text-red-600"></p>
            </div>
            <div>
              <label for="email" class="hidden">Correo electrónico</label>
              <input type="email" id="email" name="email" placeholder="Tu correo" class="w-full bg-transparent border-b-2 border-gray-200 py-3 text-gray-800 placeholder-gray-400 focus:border-blue-500 focus:outline-none transition-colors" required maxlength="100" />
              <p id="email-error" class="mt-2 hidden text-sm text-red-600"></p>
            </div>
            <div>
              <label for="phone" class="hidden">Teléfono</label>
              <!-- Cambio 3: Placeholder simplificado -->
              <input type="tel" id="phone" name="phone" placeholder="Tu teléfono" class="w-full bg-transparent border-b-2 border-gray-200 py-3 text-gray-800 placeholder-gray-400 focus:border-blue-500 focus:outline-none transition-colors" maxlength="20" />
              <p id="phone-error" class="mt-2 hidden text-sm text-red-600"></p>
            </div>
            <div>
              <label for="message" class="hidden">Mensaje</label>
              <textarea rows="4" id="message" name="message" placeholder="Déjanos tu mensaje" class="w-full bg-transparent border-b-2 border-gray-200 py-3 text-gray-800 placeholder-gray-400 focus:border-blue-500 focus:outline-none transition-colors resize-none" required maxlength="1000"></textarea>
              <div class="text-right text-xs text-gray-400 mt-1">
                <span id="message-counter">0/10000</span>
              </div>
              <p id="message-error" class="mt-2 hidden text-sm text-red-600"></p>
            </div>
            <button type="submit" id="submit-btn" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold tracking-wide py-3 px-6 rounded-md border border-transparent hover:border-blue-800 transition-colors duration-300 ease-in-out disabled:opacity-50 disabled:cursor-not-allowed">
              Enviar Mensaje
            </button>
          </form>
        </div>
      </div>
    </div>
  </section>

  
  <ContactModel backendUrl={backendUrl} />

  <script is:inline>
    // Script management for the contact form
    // This script handles form submission, validation, and UI interactions
    document.addEventListener('DOMContentLoaded', () => {
      const form = document.getElementById('contact-form');
      const submitBtn = document.getElementById('submit-btn');
      const modal = document.getElementById('contact-modal');
      const loadingOverlay = document.getElementById('loading-overlay');
      const contactComponent = document.getElementById('contact-component');
      const backendUrl = contactComponent?.dataset.backendUrl || 'http://localhost:8000';

      if (!form || !submitBtn || !modal || !loadingOverlay) {
        console.error('Error: No se encontraron todos los elementos del formulario de contacto.');
        return;
      }
      
      const modalContent = document.getElementById('modal-content');
      const closeBtn = document.getElementById('modal-close');
      const okBtn = document.getElementById('modal-ok-btn');
      let isSubmitting = false;

      // --- UI Functions ---
      const showLoading = (show) => {
        loadingOverlay.classList.toggle('hidden', !show);
      };

      const showModal = (title, message, isSuccess) => {
        const modalTitle = modal.querySelector('#modal-title');
        const modalMessage = modal.querySelector('#modal-message');
        const successIcon = modal.querySelector('#success-icon');
        const errorIcon = modal.querySelector('#error-icon');

        if(modalTitle) modalTitle.textContent = title;
        if(modalMessage) modalMessage.textContent = message;
        successIcon?.classList.toggle('hidden', !isSuccess);
        errorIcon?.classList.toggle('hidden', isSuccess);
        
        modal.classList.remove('hidden');
        setTimeout(() => modalContent.classList.remove('scale-95', 'opacity-0'), 10);
      };

      const hideModal = () => {
        modalContent.classList.add('scale-95', 'opacity-0');
        setTimeout(() => modal.classList.add('hidden'), 300);
      };

      // --- Validation ---
      const showError = (fieldId, message) => {
        const errorElement = document.getElementById(`${fieldId}-error`);
        if(errorElement) {
            errorElement.textContent = message;
            errorElement.classList.remove('hidden');
        }
      };

      const clearErrors = () => {
        document.querySelectorAll('p[id$="-error"]').forEach(p => p.classList.add('hidden'));
      };

      const validateForm = () => {
        clearErrors();
        let isValid = true;
        const name = form.elements.name.value.trim();
        const email = form.elements.email.value.trim();
        const message = form.elements.message.value.trim();

        if (name.length < 2) {
          showError('name', 'El nombre es demasiado corto.');
          isValid = false;
        }
        if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
          showError('email', 'Por favor, introduce un correo válido.');
          isValid = false;
        }
        if (message.length < 10) {
          showError('message', 'El mensaje debe tener al menos 10 caracteres.');
          isValid = false;
        } else if (message.length > 10000) {
          showError('message', 'El mensaje no puede exceder los 10000 caracteres.');
          isValid = false;
        }
        return isValid;
      };

      // --- Events ---
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        if (!validateForm() || isSubmitting) return;

        isSubmitting = true;
        submitBtn.disabled = true;
        showLoading(true);

        const formData = {
          name: form.elements.name.value,
          email: form.elements.email.value,
          phone: form.elements.phone.value,
          message: form.elements.message.value,
        };

        try {
          const response = await fetch(`${backendUrl}/api/contact`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(formData),
          });

          if (!response.ok) {
            throw new Error(`Error del servidor: ${response.status}`);
          }
          
          showModal('¡Mensaje Enviado!', 'Gracias por contactarnos. Te responderemos lo antes posible.', true);
          form.reset();
          document.getElementById('message-counter').textContent = '0/1000';

        } catch (error) {
          console.error('Error al enviar el formulario:', error);
          showModal('Error', 'Hubo un problema al enviar tu mensaje. Por favor, inténtalo de nuevo más tarde.', false);
        } finally {
          isSubmitting = false;
          submitBtn.disabled = false;
          showLoading(false);
        }
      });

      closeBtn?.addEventListener('click', hideModal);
      okBtn?.addEventListener('click', hideModal);

      // Character counter
      const messageField = document.getElementById('message');
      const counter = document.getElementById('message-counter');
      messageField?.addEventListener('input', () => {
          counter.textContent = `${messageField.value.length}`;
      });
    });
  </script>
</BaseLayout>